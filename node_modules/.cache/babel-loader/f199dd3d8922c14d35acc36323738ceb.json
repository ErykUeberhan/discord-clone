{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\discord-clone\\\\src\\\\Category.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Category.css';\nimport { FiChevronDown } from 'react-icons/fi';\nimport Channel from './Channel';\nimport db from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCategoryId, setCategoryInfo } from './features/counter/appSlice';\nimport firebase from 'firebase';\n\nfunction Category({\n  id,\n  title\n}) {\n  _s();\n\n  const categoryId = useSelector(selectCategoryId);\n  const [channels, setChannels] = useState([]);\n  const dispatch = useDispatch();\n\n  const addChannel = () => {\n    const channelName = prompt('Add channel:');\n\n    if (channelName) {\n      db.collection('categories').doc(categoryId).collection('channels').add({\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        channelName: channelName\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (categoryId) {\n      db.collection('categories').doc(categoryId).collection('channels').orderBy('timestamp').onSnapshot(snapshot => setChannels(snapshot.docs.map(doc => ({\n        id: doc.id,\n        channel: doc.data()\n      }))));\n    }\n  }, [categoryId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category\",\n    onClick: () => {\n      dispatch(setCategoryInfo({\n        categoryId: id,\n        categoryName: title\n      }));\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category_header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category_header_title\",\n        children: [/*#__PURE__*/_jsxDEV(FiChevronDown, {\n          onClick: () => {\n            dispatch(setCategoryInfo({\n              categoryId: id,\n              categoryName: title\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category_header_addChannel\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: addChannel,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category_channels\",\n      children: id === categoryId ? channels.map(({\n        id,\n        channel\n      }) => /*#__PURE__*/_jsxDEV(Channel, {\n        id: id,\n        title: channel.channelName\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Category, \"J4KOhTP+mKwvMyc/bpdeReDL/ZI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/discord-clone/src/Category.js"],"names":["React","useEffect","useState","FiChevronDown","Channel","db","useDispatch","useSelector","selectCategoryId","setCategoryInfo","firebase","Category","id","title","categoryId","channels","setChannels","dispatch","addChannel","channelName","prompt","collection","doc","add","timestamp","firestore","FieldValue","serverTimestamp","orderBy","onSnapshot","snapshot","docs","map","channel","data","categoryName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Category.css'\r\nimport { FiChevronDown } from 'react-icons/fi'\r\nimport Channel from './Channel'\r\nimport db from './firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectCategoryId, setCategoryInfo } from './features/counter/appSlice'\r\nimport firebase from 'firebase'\r\n\r\nfunction Category({ id, title }) {\r\n    const categoryId = useSelector(selectCategoryId)\r\n    const [channels, setChannels] = useState([])\r\n    const dispatch = useDispatch();\r\n\r\n    const addChannel = () => {\r\n        const channelName = prompt('Add channel:');\r\n        if (channelName) {\r\n            db.collection('categories').doc(categoryId).collection('channels').add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                channelName: channelName,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (categoryId) {\r\n            db.collection('categories').doc(categoryId).collection('channels').orderBy('timestamp').onSnapshot((snapshot) =>\r\n                setChannels(snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    channel: doc.data(),\r\n                }))));\r\n        }\r\n\r\n    }, [categoryId])\r\n    return (\r\n        <div className='category' onClick={() => {\r\n            dispatch(\r\n                setCategoryInfo({\r\n                    categoryId: id,\r\n                    categoryName: title,\r\n                })\r\n            )\r\n        }}>\r\n            <div className='category_header'>\r\n                <div className='category_header_title'>\r\n                    <FiChevronDown onClick={() => {\r\n                        dispatch(\r\n                            setCategoryInfo({\r\n                                categoryId: id,\r\n                                categoryName: title,\r\n                            })\r\n                        )\r\n                    }} />\r\n                    <p>{title}</p>\r\n                </div>\r\n                <div className='category_header_addChannel'>\r\n                    <p onClick={addChannel}>+</p>\r\n                </div>\r\n            </div>\r\n            <div className='category_channels'>\r\n                {id === categoryId\r\n                    ?\r\n                    channels.map(({ id, channel }) => (\r\n                        <Channel key={id} id={id} title={channel.channelName} />\r\n                    ))\r\n                    : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Category\r\n"]},"metadata":{},"sourceType":"module"}