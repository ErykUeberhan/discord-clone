{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Eryk-laptop\\\\Desktop\\\\ReactProjects\\\\discord-clone\\\\src\\\\Category.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Category.css';\nimport { FiChevronDown, FiChevronRight } from 'react-icons/fi';\nimport Channel from './Channel';\nimport db from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCategoryId, selectServerId, setCategoryInfo, setChannelInfo } from './features/counter/appSlice';\nimport firebase from 'firebase';\nimport { BsX, BsPlus } from \"react-icons/bs\";\n\nfunction Category({\n  id,\n  title\n}) {\n  _s();\n\n  const categoryId = useSelector(selectCategoryId);\n  const serverId = useSelector(selectServerId);\n  const [channels, setChannels] = useState([]);\n  const dispatch = useDispatch(); // add channel to database\n\n  const addChannel = () => {\n    const channelName = prompt('Add channel:');\n\n    if (channelName) {\n      db.collection('servers').doc(serverId).collection('categories').doc(categoryId).collection('channels').add({\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        channelName: channelName\n      });\n    }\n  }; // remove category from database\n\n\n  const removeCategory = () => {\n    const category = db.collection('servers').doc(serverId).collection('categories').doc(categoryId);\n    const channel = category.collection('channels'); // remove data belonging to this category\n\n    channel.get().then(res => {\n      res.forEach(element => {\n        element.ref.collection('messages').get().then(res => {\n          res.forEach(element => {\n            element.ref.delete();\n          });\n          element.ref.delete();\n        });\n        element.ref.delete();\n      });\n    }); // delete category\n\n    category.delete(); // set local info about removed data to null\n\n    dispatch(setChannelInfo({\n      channelId: null\n    }));\n    dispatch(setCategoryInfo({\n      categoryId: null\n    }));\n  }; // insert data from database to channels array\n\n\n  useEffect(() => {\n    if (categoryId) {\n      db.collection('servers').doc(serverId).collection('categories').doc(categoryId).collection('channels').orderBy('timestamp').onSnapshot(snapshot => setChannels(snapshot.docs.map(doc => ({\n        id: doc.id,\n        channel: doc.data()\n      }))));\n    }\n  }, [categoryId, serverId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category\",\n    onClick: () => {\n      // send info about choosen category\n      if (id !== categoryId) {\n        dispatch(setChannelInfo({\n          channelId: null,\n          channelName: null\n        }));\n        dispatch(setCategoryInfo({\n          categoryId: id,\n          categoryName: title\n        }));\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category_header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category_header_title\",\n        children: [id === categoryId ? /*#__PURE__*/_jsxDEV(FiChevronDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(FiChevronRight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category_header_menu\",\n        children: id === categoryId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(BsPlus, {\n            className: \"category_header_menu_add\",\n            onClick: addChannel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(BsX, {\n            className: \"category_header_menu_remove\",\n            onClick: removeCategory\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category_channels\",\n      children: // render channels from array\n      id === categoryId ? channels.map(({\n        id,\n        channel\n      }) => /*#__PURE__*/_jsxDEV(Channel, {\n        id: id,\n        title: channel.channelName\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Category, \"sMbwttHkhwb2OfuxQ7a9Hbzaed8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/Eryk-laptop/Desktop/ReactProjects/discord-clone/src/Category.js"],"names":["React","useEffect","useState","FiChevronDown","FiChevronRight","Channel","db","useDispatch","useSelector","selectCategoryId","selectServerId","setCategoryInfo","setChannelInfo","firebase","BsX","BsPlus","Category","id","title","categoryId","serverId","channels","setChannels","dispatch","addChannel","channelName","prompt","collection","doc","add","timestamp","firestore","FieldValue","serverTimestamp","removeCategory","category","channel","get","then","res","forEach","element","ref","delete","channelId","orderBy","onSnapshot","snapshot","docs","map","data","categoryName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Category.css'\r\nimport { FiChevronDown, FiChevronRight } from 'react-icons/fi'\r\nimport Channel from './Channel'\r\nimport db from './firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectCategoryId, selectServerId, setCategoryInfo, setChannelInfo } from './features/counter/appSlice'\r\nimport firebase from 'firebase'\r\nimport { BsX, BsPlus } from \"react-icons/bs\";\r\n\r\nfunction Category({ id, title }) {\r\n    const categoryId = useSelector(selectCategoryId)\r\n    const serverId = useSelector(selectServerId)\r\n    const [channels, setChannels] = useState([])\r\n    const dispatch = useDispatch();\r\n\r\n    // add channel to database\r\n    const addChannel = () => {\r\n        const channelName = prompt('Add channel:');\r\n        if (channelName) {\r\n            db.collection('servers').doc(serverId).collection('categories').doc(categoryId).collection('channels').add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                channelName: channelName,\r\n            });\r\n        }\r\n    }\r\n\r\n    // remove category from database\r\n    const removeCategory = () => {\r\n        const category = db.collection('servers').doc(serverId).collection('categories').doc(categoryId);\r\n        const channel = category.collection('channels');\r\n\r\n        // remove data belonging to this category\r\n        channel.get().then((res) => {\r\n            res.forEach((element) => {\r\n                element.ref.collection('messages').get().then((res) => {\r\n                    res.forEach((element) => {\r\n                        element.ref.delete();\r\n                    });\r\n                    element.ref.delete();\r\n                });\r\n                element.ref.delete();\r\n            });\r\n        });\r\n\r\n        // delete category\r\n        category.delete();\r\n\r\n        // set local info about removed data to null\r\n        dispatch(\r\n            setChannelInfo({\r\n                channelId: null,\r\n            })\r\n        );\r\n\r\n        dispatch(\r\n            setCategoryInfo({\r\n                categoryId: null,\r\n            })\r\n        );\r\n    }\r\n\r\n    // insert data from database to channels array\r\n    useEffect(() => {\r\n        if (categoryId) {\r\n            db.collection('servers').doc(serverId).collection('categories').doc(categoryId).collection('channels').orderBy('timestamp').onSnapshot((snapshot) =>\r\n                setChannels(snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    channel: doc.data(),\r\n                }))));\r\n        }\r\n\r\n    }, [categoryId, serverId])\r\n    return (\r\n        <div className='category' onClick={() => {\r\n            // send info about choosen category\r\n            if (id !== categoryId) {\r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: null,\r\n                        channelName: null,\r\n                    })\r\n                )\r\n\r\n                dispatch(\r\n                    setCategoryInfo({\r\n                        categoryId: id,\r\n                        categoryName: title,\r\n                    })\r\n                )\r\n            }\r\n\r\n        }}>\r\n            <div className='category_header'>\r\n                <div className='category_header_title'>\r\n                    {id === categoryId\r\n                        ?\r\n                        <FiChevronDown />\r\n                        :\r\n                        <FiChevronRight />\r\n                    }\r\n                    <p>{title}</p>\r\n                </div>\r\n                <div className='category_header_menu'>\r\n                    {id === categoryId\r\n                        ?\r\n                        <>\r\n                            <BsPlus className='category_header_menu_add' onClick={addChannel} />\r\n                            <BsX className='category_header_menu_remove' onClick={removeCategory} />\r\n                        </>\r\n                        : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='category_channels'>\r\n                {// render channels from array\r\n                id === categoryId\r\n                    ?\r\n                    channels.map(({ id, channel }) => (\r\n                        <Channel key={id} id={id} title={channel.channelName} />\r\n                    ))\r\n                    : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Category\r\n"]},"metadata":{},"sourceType":"module"}