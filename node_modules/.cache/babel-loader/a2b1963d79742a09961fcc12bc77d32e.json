{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\discord-clone\\\\src\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Chat.css';\nimport { MdAddCircle } from \"react-icons/md\";\nimport { FaGift, FaSmile } from \"react-icons/fa\";\nimport { RiFileGifFill } from \"react-icons/ri\";\nimport { MdSend } from \"react-icons/md\";\nimport Message from './Message';\nimport { useEffect } from 'react';\nimport db from './firebase';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/counter/userSlice';\nimport { selectCategoryId, selectChannelId, selectChannelName } from './features/counter/appSlice';\nimport firebase from 'firebase';\n\nfunction Chat() {\n  _s();\n\n  const user = useSelector(selectUser);\n  const categoryId = useSelector(selectCategoryId);\n  const channelId = useSelector(selectChannelId);\n  const channelName = useSelector(selectChannelName); // const serverName = useSelector(selectServerName);\n\n  const [messages, setMessages] = useState([]);\n  const [messageText, setMessageText] = useState();\n  const [messagesEnd, setMessagesEnd] = useState();\n  const [serverName, setServerName] = useState();\n\n  const sendMessage = () => {\n    console.log(channelId);\n\n    if (channelId) {\n      let nick = '';\n      if (user) nick = user.email.slice(0, user.email.indexOf('@'));\n\n      const dateEdit = date => {\n        if (date < 10) return `0${date}`;else return date;\n      };\n\n      let d = new Date();\n      let day = d.getDate();\n      let month = d.getMonth();\n      let year = d.getFullYear();\n      let hours = d.getHours();\n      let minutes = d.getMinutes();\n      let date = `${dateEdit(hours)}:${dateEdit(minutes)} \\xa0 ${dateEdit(day)}/${dateEdit(month)}/${dateEdit(year)}`;\n      db.collection('categories').doc(categoryId).collection('channels').doc(channelId).collection('messages').add({\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        message: messageText,\n        nick,\n        date\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (channelId) {\n      db.collection('categories').doc(categoryId).collection('channels').doc(channelId).collection(\"messages\").orderBy('timestamp').onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => ({\n        id: doc.id,\n        msg: doc.data()\n      }))));\n    }\n  }, [channelId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_messages_top\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_messages_bottom\",\n        children: [messages.map(({\n          id,\n          msg\n        }) => /*#__PURE__*/_jsxDEV(Message, {\n          id: id,\n          message: msg.message,\n          nick: msg.nick,\n          date: msg.date\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)), messagesEnd ? messagesEnd.scrollIntoView({\n          behavior: 'smooth'\n        }) : null, channelName ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat_messages_bottom_emptyChannel\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"chat_messages_bottom_emptyChannel_text\",\n            children: \"Welcome to \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: el => setMessagesEnd(el)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_sendTextField\",\n      children: [/*#__PURE__*/_jsxDEV(MdAddCircle, {\n        className: \"chat_sendTextField_icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat_sendTextField_input\",\n        onChange: event => setMessageText(event.target.value),\n        placeholder: `Message #${channelName}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MdSend, {\n        className: \"chat_sendTextField_send\",\n        onClick: () => {\n          if (messageText.length > 0) sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaGift, {\n        className: \"chat_sendTextField_icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RiFileGifFill, {\n        className: \"chat_sendTextField_icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaSmile, {\n        className: \"chat_sendTextField_icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"QHS4npsKVITvCWQOlLol6cVBDig=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/discord-clone/src/Chat.js"],"names":["React","useState","MdAddCircle","FaGift","FaSmile","RiFileGifFill","MdSend","Message","useEffect","db","useSelector","selectUser","selectCategoryId","selectChannelId","selectChannelName","firebase","Chat","user","categoryId","channelId","channelName","messages","setMessages","messageText","setMessageText","messagesEnd","setMessagesEnd","serverName","setServerName","sendMessage","console","log","nick","email","slice","indexOf","dateEdit","date","d","Date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","collection","doc","add","timestamp","firestore","FieldValue","serverTimestamp","message","orderBy","onSnapshot","snapshot","docs","map","id","msg","data","scrollIntoView","behavior","el","event","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css';\r\nimport { MdAddCircle } from \"react-icons/md\";\r\nimport { FaGift, FaSmile } from \"react-icons/fa\";\r\nimport { RiFileGifFill } from \"react-icons/ri\";\r\nimport { MdSend } from \"react-icons/md\";\r\nimport Message from './Message';\r\nimport { useEffect } from 'react';\r\nimport db from './firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/counter/userSlice';\r\nimport { selectCategoryId, selectChannelId, selectChannelName } from './features/counter/appSlice';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const categoryId = useSelector(selectCategoryId);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    // const serverName = useSelector(selectServerName);\r\n    const [messages, setMessages] = useState([]);\r\n    const [messageText, setMessageText] = useState();\r\n    const [messagesEnd, setMessagesEnd] = useState();\r\n    const [serverName, setServerName] = useState();\r\n\r\n\r\n    const sendMessage = () => {\r\n        console.log(channelId)\r\n        if (channelId) {\r\n            let nick = ''\r\n            if (user) nick = user.email.slice(0, user.email.indexOf('@'));\r\n\r\n            const dateEdit = (date) => {\r\n                if (date < 10) return `0${date}`\r\n                else return date\r\n            }\r\n            let d = new Date();\r\n            let day = d.getDate();\r\n            let month = d.getMonth();\r\n            let year = d.getFullYear();\r\n            let hours = d.getHours();\r\n            let minutes = d.getMinutes();\r\n            let date = `${dateEdit(hours)}:${dateEdit(minutes)} \\xa0 ${dateEdit(day)}/${dateEdit(month)}/${dateEdit(year)}`;\r\n\r\n            db.collection('categories').doc(categoryId).collection('channels').doc(channelId).collection('messages').add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: messageText,\r\n                nick,\r\n                date,\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('categories').doc(categoryId).collection('channels').doc(channelId).collection(\"messages\").orderBy('timestamp').onSnapshot((snapshot) =>\r\n                setMessages(\r\n                    snapshot.docs.map((doc) => ({\r\n                        id: doc.id,\r\n                        msg: doc.data(),\r\n                    }))\r\n                )\r\n            );\r\n        }\r\n\r\n    }, [channelId])\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_messages'>\r\n                <div className='chat_messages_top'>\r\n\r\n                </div>\r\n                <div className='chat_messages_bottom' >\r\n                    {messages.map(({ id, msg }) => (\r\n                        <Message key={id} id={id} message={msg.message} nick={msg.nick} date={msg.date} />\r\n                    ))}\r\n                    {(messagesEnd)\r\n                        ?\r\n                        messagesEnd.scrollIntoView({ behavior: 'smooth' })\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        channelName\r\n                            ?\r\n                            null\r\n                            :\r\n                            <div className='chat_messages_bottom_emptyChannel'>\r\n                                <p className='chat_messages_bottom_emptyChannel_text'>Welcome to { }</p>\r\n                            </div>\r\n                    }\r\n                    <div ref={(el) => setMessagesEnd(el)}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='chat_sendTextField'>\r\n                <MdAddCircle className='chat_sendTextField_icon' />\r\n                <input className='chat_sendTextField_input' onChange={(event) => setMessageText(event.target.value)} placeholder={`Message #${channelName}`} />\r\n                <MdSend className='chat_sendTextField_send' onClick={() => { if (messageText.length > 0) sendMessage() }} />\r\n                <FaGift className='chat_sendTextField_icon' />\r\n                <RiFileGifFill className='chat_sendTextField_icon' />\r\n                <FaSmile className='chat_sendTextField_icon' />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n"]},"metadata":{},"sourceType":"module"}