{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\Pulpit\\\\ReactProjects\\\\discord-clone\\\\src\\\\MobileMenuIcon.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from 'react';\nimport './MobileMenuIcon.css';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectMobileMenu, setMobileVersion } from './features/counter/appSlice';\n\nfunction MobileMenuIcon() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const dispatch = useDispatch();\n  const mobileMenu = useSelector(selectMobileMenu); // set window size to variables\n\n  function useWindowSize() {\n    _s();\n\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n  } // select window width\n\n\n  _s(useWindowSize, \"13XWg4Ot0MOczACYcn76+JLjv8w=\");\n\n  const [width] = useWindowSize(); // set mobile version depends on window size\n\n  if (width >= 740) {\n    dispatch(setMobileVersion({\n      mobileMenu: null\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mobileMenuIcon\",\n    onClick: () => {\n      // show mobile menu\n      dispatch(setMobileVersion({\n        mobileMenu: !mobileMenu\n      }));\n    },\n    children: /*#__PURE__*/_jsxDEV(GiHamburgerMenu, {\n      className: \"mobileMenuIcon_icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(MobileMenuIcon, \"jlCOKn8VMtCUpUoNKeV10InASSI=\", false, function () {\n  return [useDispatch, useSelector, useWindowSize];\n});\n\n_c = MobileMenuIcon;\nexport default MobileMenuIcon;\n\nvar _c;\n\n$RefreshReg$(_c, \"MobileMenuIcon\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/Pulpit/ReactProjects/discord-clone/src/MobileMenuIcon.js"],"names":["React","useLayoutEffect","useState","GiHamburgerMenu","useDispatch","useSelector","selectMobileMenu","setMobileVersion","MobileMenuIcon","dispatch","mobileMenu","useWindowSize","size","setSize","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","width"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,sBAAP;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,6BAAnD;;AAGA,SAASC,cAAT,GAA0B;AAAA;;AAAA;;AACtB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,UAAU,GAAGL,WAAW,CAACC,gBAAD,CAA9B,CAFsB,CAItB;;AACA,WAASK,aAAT,GAAyB;AAAA;;AACrB,UAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAAhC;AACAD,IAAAA,eAAe,CAAC,MAAM;AAClB,eAASa,UAAT,GAAsB;AAClBD,QAAAA,OAAO,CAAC,CAACE,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAD,CAAP;AACH;;AACDF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,UAAlC;AACAA,MAAAA,UAAU;AACV,aAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,UAArC,CAAb;AACH,KAPc,EAOZ,EAPY,CAAf;AAQA,WAAOF,IAAP;AACH,GAhBqB,CAkBtB;;;AAlBsB,KAKbD,aALa;;AAmBtB,QAAM,CAACS,KAAD,IAAUT,aAAa,EAA7B,CAnBsB,CAqBtB;;AACA,MAAIS,KAAK,IAAI,GAAb,EAAkB;AACdX,IAAAA,QAAQ,CACJF,gBAAgB,CAAC;AACbG,MAAAA,UAAU,EAAE;AADC,KAAD,CADZ,CAAR;AAKH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAE,MAAM;AAC3C;AACAD,MAAAA,QAAQ,CACJF,gBAAgB,CAAC;AACbG,QAAAA,UAAU,EAAE,CAACA;AADA,OAAD,CADZ,CAAR;AAKH,KAPD;AAAA,2BAQI,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;IAzCQF,c;UACYJ,W,EACEC,W,EAiBHM,a;;;KAnBXH,c;AA2CT,eAAeA,cAAf","sourcesContent":["import React, { useLayoutEffect, useState } from 'react'\r\nimport './MobileMenuIcon.css'\r\nimport { GiHamburgerMenu } from 'react-icons/gi';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectMobileMenu, setMobileVersion } from './features/counter/appSlice';\r\n\r\n\r\nfunction MobileMenuIcon() {\r\n    const dispatch = useDispatch();\r\n    const mobileMenu = useSelector(selectMobileMenu);\r\n\r\n    // set window size to variables\r\n    function useWindowSize() {\r\n        const [size, setSize] = useState([0, 0]);\r\n        useLayoutEffect(() => {\r\n            function updateSize() {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n            window.addEventListener('resize', updateSize);\r\n            updateSize();\r\n            return () => window.removeEventListener('resize', updateSize);\r\n        }, []);\r\n        return size;\r\n    }\r\n\r\n    // select window width\r\n    const [width] = useWindowSize();\r\n\r\n    // set mobile version depends on window size\r\n    if (width >= 740) {\r\n        dispatch(\r\n            setMobileVersion({\r\n                mobileMenu: null,\r\n            })\r\n        );\r\n    }\r\n    return (\r\n        <div className='mobileMenuIcon' onClick={() => {\r\n            // show mobile menu\r\n            dispatch(\r\n                setMobileVersion({\r\n                    mobileMenu: !mobileMenu,\r\n                })\r\n            )\r\n        }}>\r\n            <GiHamburgerMenu className='mobileMenuIcon_icon' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileMenuIcon\r\n"]},"metadata":{},"sourceType":"module"}